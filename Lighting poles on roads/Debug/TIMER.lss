
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fe6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001fe6  0000205a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000165c  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000afd  00000000  00000000  000036c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000041bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000042fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000446d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000060b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00006fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00007d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00007eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000813d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000890b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 49 06 	call	0xc92	; 0xc92 <main>
      7a:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d6 0f 	jmp	0x1fac	; 0x1fac <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 c6 0f 	jmp	0x1f8c	; 0x1f8c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_INIT>:
/*Description    : hvjhvkjaebfbkjwebkjw    */
/*Parameter (IN) :                         */
/*Parameter (OUT):                         */
/*******************************************/
void ADC_INIT(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
ADMUX|=(1<<6)|(1<<5);
     b3e:	a7 e2       	ldi	r26, 0x27	; 39
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	e7 e2       	ldi	r30, 0x27	; 39
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	80 66       	ori	r24, 0x60	; 96
     b4a:	8c 93       	st	X, r24
ADCSRA|=(1<<7);
     b4c:	a6 e2       	ldi	r26, 0x26	; 38
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	e6 e2       	ldi	r30, 0x26	; 38
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	80 68       	ori	r24, 0x80	; 128
     b58:	8c 93       	st	X, r24
ADCSRA|=(1<<0)|(1<<2)|(1<<1);
     b5a:	a6 e2       	ldi	r26, 0x26	; 38
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	e6 e2       	ldi	r30, 0x26	; 38
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	87 60       	ori	r24, 0x07	; 7
     b66:	8c 93       	st	X, r24
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <ReadChannel>:

void ReadChannel(u8 channel)
{
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	0f 92       	push	r0
     b74:	cd b7       	in	r28, 0x3d	; 61
     b76:	de b7       	in	r29, 0x3e	; 62
     b78:	89 83       	std	Y+1, r24	; 0x01
channel&=7;
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	87 70       	andi	r24, 0x07	; 7
     b7e:	89 83       	std	Y+1, r24	; 0x01
ADMUX&=0xE0;
     b80:	a7 e2       	ldi	r26, 0x27	; 39
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e7 e2       	ldi	r30, 0x27	; 39
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	80 7e       	andi	r24, 0xE0	; 224
     b8c:	8c 93       	st	X, r24
ADMUX|=channel;
     b8e:	a7 e2       	ldi	r26, 0x27	; 39
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e7 e2       	ldi	r30, 0x27	; 39
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	90 81       	ld	r25, Z
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	89 2b       	or	r24, r25
     b9c:	8c 93       	st	X, r24
ADCSRA|=(1<<6);
     b9e:	a6 e2       	ldi	r26, 0x26	; 38
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e6 e2       	ldi	r30, 0x26	; 38
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	80 64       	ori	r24, 0x40	; 64
     baa:	8c 93       	st	X, r24
while( !( ADCSRA & (1<<4) ) )
     bac:	e6 e2       	ldi	r30, 0x26	; 38
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	80 71       	andi	r24, 0x10	; 16
     bb8:	90 70       	andi	r25, 0x00	; 0
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	b9 f3       	breq	.-18     	; 0xbac <ReadChannel+0x3e>
{;}
ADCSRA |=(1<<4); //clear flag
     bbe:	a6 e2       	ldi	r26, 0x26	; 38
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e6 e2       	ldi	r30, 0x26	; 38
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	8c 93       	st	X, r24
PORTD=ADCL;
     bcc:	a2 e3       	ldi	r26, 0x32	; 50
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e4 e2       	ldi	r30, 0x24	; 36
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8c 93       	st	X, r24
PORTC=ADCH;
     bd8:	a5 e3       	ldi	r26, 0x35	; 53
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e5 e2       	ldi	r30, 0x25	; 37
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8c 93       	st	X, r24
}
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <Temp_value>:

u8 Temp_value(u8 Portx)
{
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <Temp_value+0x6>
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <Temp_value+0x8>
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	8a 83       	std	Y+2, r24	; 0x02
u8 localval=Portx;
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	89 83       	std	Y+1, r24	; 0x01
localval=(localval*5000)/(1024);
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	28 2f       	mov	r18, r24
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	88 e8       	ldi	r24, 0x88	; 136
     c06:	93 e1       	ldi	r25, 0x13	; 19
     c08:	ac 01       	movw	r20, r24
     c0a:	24 9f       	mul	r18, r20
     c0c:	c0 01       	movw	r24, r0
     c0e:	25 9f       	mul	r18, r21
     c10:	90 0d       	add	r25, r0
     c12:	34 9f       	mul	r19, r20
     c14:	90 0d       	add	r25, r0
     c16:	11 24       	eor	r1, r1
     c18:	9c 83       	std	Y+4, r25	; 0x04
     c1a:	8b 83       	std	Y+3, r24	; 0x03
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	99 23       	and	r25, r25
     c22:	34 f4       	brge	.+12     	; 0xc30 <Temp_value+0x44>
     c24:	4b 81       	ldd	r20, Y+3	; 0x03
     c26:	5c 81       	ldd	r21, Y+4	; 0x04
     c28:	41 50       	subi	r20, 0x01	; 1
     c2a:	5c 4f       	sbci	r21, 0xFC	; 252
     c2c:	5c 83       	std	Y+4, r21	; 0x04
     c2e:	4b 83       	std	Y+3, r20	; 0x03
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	89 2f       	mov	r24, r25
     c36:	99 0f       	add	r25, r25
     c38:	99 0b       	sbc	r25, r25
     c3a:	85 95       	asr	r24
     c3c:	85 95       	asr	r24
     c3e:	89 83       	std	Y+1, r24	; 0x01
localval/=10;
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a e0       	ldi	r25, 0x0A	; 10
     c44:	69 2f       	mov	r22, r25
     c46:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodqi4>
     c4a:	89 83       	std	Y+1, r24	; 0x01
return localval;
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	cf 91       	pop	r28
     c58:	df 91       	pop	r29
     c5a:	08 95       	ret

00000c5c <Print_temp>:
void Print_temp(u8 temp)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	0f 92       	push	r0
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	89 83       	std	Y+1, r24	; 0x01

	LcdWriteData((temp/10)+48);
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a e0       	ldi	r25, 0x0A	; 10
     c6c:	69 2f       	mov	r22, r25
     c6e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodqi4>
     c72:	80 5d       	subi	r24, 0xD0	; 208
     c74:	0e 94 84 07 	call	0xf08	; 0xf08 <LcdWriteData>
	LcdWriteData((temp%10)+48);
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a e0       	ldi	r25, 0x0A	; 10
     c7c:	69 2f       	mov	r22, r25
     c7e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <__udivmodqi4>
     c82:	89 2f       	mov	r24, r25
     c84:	80 5d       	subi	r24, 0xD0	; 208
     c86:	0e 94 84 07 	call	0xf08	; 0xf08 <LcdWriteData>

}
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <main>:
#define preload 87
#define desire 4
#define MAX 127

int main()
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
DDRA=0x00;
     c9a:	ea e3       	ldi	r30, 0x3A	; 58
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	10 82       	st	Z, r1
DDRD=0xff;
     ca0:	e1 e3       	ldi	r30, 0x31	; 49
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	80 83       	st	Z, r24
DDRC=0xff;
     ca8:	e4 e3       	ldi	r30, 0x34	; 52
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	80 83       	st	Z, r24
DDRB=0xff;
     cb0:	e7 e3       	ldi	r30, 0x37	; 55
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	80 83       	st	Z, r24
ADC_INIT();
     cb8:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_INIT>
TCCR0|=(1<<1)|(1<<3)|(1<<6)|(1<<5);
     cbc:	a3 e5       	ldi	r26, 0x53	; 83
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e3 e5       	ldi	r30, 0x53	; 83
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8a 66       	ori	r24, 0x6A	; 106
     cc8:	8c 93       	st	X, r24
//TIMSK |=(1<<1);
//SREG |=(1<<7);

while(1)
{
	ReadChannel(0);
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <ReadChannel>
	OCR0=PORTC;
     cd0:	ec e5       	ldi	r30, 0x5C	; 92
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	a5 e3       	ldi	r26, 0x35	; 53
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	8c 91       	ld	r24, X
     cda:	80 83       	st	Z, r24
     cdc:	f6 cf       	rjmp	.-20     	; 0xcca <main+0x38>

00000cde <LcdWriteCmd>:
/*
 **
 *send command to data-cmd pass
 */
void LcdWriteCmd(u8 u8CmdCopy)
{
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	6d 97       	sbiw	r28, 0x1d	; 29
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_SetPinValue_u8(PORT1,RS,LOW);      /*cmd mode*/
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
	DIO_SetPinValue_u8(PORT1,RD_WR,LOW);   /*write pin enabling*/
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
	DIO_SetPinValue_u8(PORT1,ENABLE,HIGH);   /*enable high*/
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	62 e0       	ldi	r22, 0x02	; 2
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
	DIO_SetPortValue(PORT3,u8CmdCopy);
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	6d 8d       	ldd	r22, Y+29	; 0x1d
     d16:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <DIO_SetPortValue>
	DIO_SetPinValue_u8(PORT1,ENABLE,LOW);/*enable low*/
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	62 e0       	ldi	r22, 0x02	; 2
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	a0 ea       	ldi	r26, 0xA0	; 160
     d2a:	b0 e4       	ldi	r27, 0x40	; 64
     d2c:	89 8f       	std	Y+25, r24	; 0x19
     d2e:	9a 8f       	std	Y+26, r25	; 0x1a
     d30:	ab 8f       	std	Y+27, r26	; 0x1b
     d32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d34:	69 8d       	ldd	r22, Y+25	; 0x19
     d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	4a ef       	ldi	r20, 0xFA	; 250
     d42:	54 e4       	ldi	r21, 0x44	; 68
     d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	8d 8b       	std	Y+21, r24	; 0x15
     d4e:	9e 8b       	std	Y+22, r25	; 0x16
     d50:	af 8b       	std	Y+23, r26	; 0x17
     d52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d54:	6d 89       	ldd	r22, Y+21	; 0x15
     d56:	7e 89       	ldd	r23, Y+22	; 0x16
     d58:	8f 89       	ldd	r24, Y+23	; 0x17
     d5a:	98 8d       	ldd	r25, Y+24	; 0x18
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d68:	88 23       	and	r24, r24
     d6a:	2c f4       	brge	.+10     	; 0xd76 <LcdWriteCmd+0x98>
		__ticks = 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9c 8b       	std	Y+20, r25	; 0x14
     d72:	8b 8b       	std	Y+19, r24	; 0x13
     d74:	3f c0       	rjmp	.+126    	; 0xdf4 <LcdWriteCmd+0x116>
	else if (__tmp > 65535)
     d76:	6d 89       	ldd	r22, Y+21	; 0x15
     d78:	7e 89       	ldd	r23, Y+22	; 0x16
     d7a:	8f 89       	ldd	r24, Y+23	; 0x17
     d7c:	98 8d       	ldd	r25, Y+24	; 0x18
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	3f ef       	ldi	r19, 0xFF	; 255
     d82:	4f e7       	ldi	r20, 0x7F	; 127
     d84:	57 e4       	ldi	r21, 0x47	; 71
     d86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d8a:	18 16       	cp	r1, r24
     d8c:	4c f5       	brge	.+82     	; 0xde0 <LcdWriteCmd+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8e:	69 8d       	ldd	r22, Y+25	; 0x19
     d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e2       	ldi	r20, 0x20	; 32
     d9c:	51 e4       	ldi	r21, 0x41	; 65
     d9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	bc 01       	movw	r22, r24
     da8:	cd 01       	movw	r24, r26
     daa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	9c 8b       	std	Y+20, r25	; 0x14
     db4:	8b 8b       	std	Y+19, r24	; 0x13
     db6:	0f c0       	rjmp	.+30     	; 0xdd6 <LcdWriteCmd+0xf8>
     db8:	88 ec       	ldi	r24, 0xC8	; 200
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	9a 8b       	std	Y+18, r25	; 0x12
     dbe:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc0:	89 89       	ldd	r24, Y+17	; 0x11
     dc2:	9a 89       	ldd	r25, Y+18	; 0x12
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	f1 f7       	brne	.-4      	; 0xdc4 <LcdWriteCmd+0xe6>
     dc8:	9a 8b       	std	Y+18, r25	; 0x12
     dca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dcc:	8b 89       	ldd	r24, Y+19	; 0x13
     dce:	9c 89       	ldd	r25, Y+20	; 0x14
     dd0:	01 97       	sbiw	r24, 0x01	; 1
     dd2:	9c 8b       	std	Y+20, r25	; 0x14
     dd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd6:	8b 89       	ldd	r24, Y+19	; 0x13
     dd8:	9c 89       	ldd	r25, Y+20	; 0x14
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	69 f7       	brne	.-38     	; 0xdb8 <LcdWriteCmd+0xda>
     dde:	14 c0       	rjmp	.+40     	; 0xe08 <LcdWriteCmd+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de0:	6d 89       	ldd	r22, Y+21	; 0x15
     de2:	7e 89       	ldd	r23, Y+22	; 0x16
     de4:	8f 89       	ldd	r24, Y+23	; 0x17
     de6:	98 8d       	ldd	r25, Y+24	; 0x18
     de8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	9c 8b       	std	Y+20, r25	; 0x14
     df2:	8b 8b       	std	Y+19, r24	; 0x13
     df4:	8b 89       	ldd	r24, Y+19	; 0x13
     df6:	9c 89       	ldd	r25, Y+20	; 0x14
     df8:	98 8b       	std	Y+16, r25	; 0x10
     dfa:	8f 87       	std	Y+15, r24	; 0x0f
     dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfe:	98 89       	ldd	r25, Y+16	; 0x10
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	f1 f7       	brne	.-4      	; 0xe00 <LcdWriteCmd+0x122>
     e04:	98 8b       	std	Y+16, r25	; 0x10
     e06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	DIO_SetPinValue_u8(PORT1,ENABLE,HIGH);   /*enable high*/
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	62 e0       	ldi	r22, 0x02	; 2
     e0c:	41 e0       	ldi	r20, 0x01	; 1
     e0e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	a0 e2       	ldi	r26, 0x20	; 32
     e18:	b1 e4       	ldi	r27, 0x41	; 65
     e1a:	8b 87       	std	Y+11, r24	; 0x0b
     e1c:	9c 87       	std	Y+12, r25	; 0x0c
     e1e:	ad 87       	std	Y+13, r26	; 0x0d
     e20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e22:	6b 85       	ldd	r22, Y+11	; 0x0b
     e24:	7c 85       	ldd	r23, Y+12	; 0x0c
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	4a ef       	ldi	r20, 0xFA	; 250
     e30:	54 e4       	ldi	r21, 0x44	; 68
     e32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	8f 83       	std	Y+7, r24	; 0x07
     e3c:	98 87       	std	Y+8, r25	; 0x08
     e3e:	a9 87       	std	Y+9, r26	; 0x09
     e40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e42:	6f 81       	ldd	r22, Y+7	; 0x07
     e44:	78 85       	ldd	r23, Y+8	; 0x08
     e46:	89 85       	ldd	r24, Y+9	; 0x09
     e48:	9a 85       	ldd	r25, Y+10	; 0x0a
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	40 e8       	ldi	r20, 0x80	; 128
     e50:	5f e3       	ldi	r21, 0x3F	; 63
     e52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e56:	88 23       	and	r24, r24
     e58:	2c f4       	brge	.+10     	; 0xe64 <LcdWriteCmd+0x186>
		__ticks = 1;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9e 83       	std	Y+6, r25	; 0x06
     e60:	8d 83       	std	Y+5, r24	; 0x05
     e62:	3f c0       	rjmp	.+126    	; 0xee2 <LcdWriteCmd+0x204>
	else if (__tmp > 65535)
     e64:	6f 81       	ldd	r22, Y+7	; 0x07
     e66:	78 85       	ldd	r23, Y+8	; 0x08
     e68:	89 85       	ldd	r24, Y+9	; 0x09
     e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	3f ef       	ldi	r19, 0xFF	; 255
     e70:	4f e7       	ldi	r20, 0x7F	; 127
     e72:	57 e4       	ldi	r21, 0x47	; 71
     e74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e78:	18 16       	cp	r1, r24
     e7a:	4c f5       	brge	.+82     	; 0xece <LcdWriteCmd+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e80:	8d 85       	ldd	r24, Y+13	; 0x0d
     e82:	9e 85       	ldd	r25, Y+14	; 0x0e
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e2       	ldi	r20, 0x20	; 32
     e8a:	51 e4       	ldi	r21, 0x41	; 65
     e8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	9e 83       	std	Y+6, r25	; 0x06
     ea2:	8d 83       	std	Y+5, r24	; 0x05
     ea4:	0f c0       	rjmp	.+30     	; 0xec4 <LcdWriteCmd+0x1e6>
     ea6:	88 ec       	ldi	r24, 0xC8	; 200
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <LcdWriteCmd+0x1d4>
     eb6:	9c 83       	std	Y+4, r25	; 0x04
     eb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	9e 83       	std	Y+6, r25	; 0x06
     ec2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec4:	8d 81       	ldd	r24, Y+5	; 0x05
     ec6:	9e 81       	ldd	r25, Y+6	; 0x06
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	69 f7       	brne	.-38     	; 0xea6 <LcdWriteCmd+0x1c8>
     ecc:	14 c0       	rjmp	.+40     	; 0xef6 <LcdWriteCmd+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ece:	6f 81       	ldd	r22, Y+7	; 0x07
     ed0:	78 85       	ldd	r23, Y+8	; 0x08
     ed2:	89 85       	ldd	r24, Y+9	; 0x09
     ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	9e 83       	std	Y+6, r25	; 0x06
     ee0:	8d 83       	std	Y+5, r24	; 0x05
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <LcdWriteCmd+0x210>
     ef2:	9a 83       	std	Y+2, r25	; 0x02
     ef4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
     ef6:	6d 96       	adiw	r28, 0x1d	; 29
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <LcdWriteData>:
void LcdWriteData(u8 u8DataCopy)
{
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	6d 97       	sbiw	r28, 0x1d	; 29
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	    DIO_SetPinValue_u8(PORT1,RS,HIGH);      /*cmd mode*/
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
		DIO_SetPinValue_u8(PORT1,RD_WR,LOW);   /*write pin enabling*/
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
		DIO_SetPinValue_u8(PORT1,ENABLE,HIGH);   /*enable high*/
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	62 e0       	ldi	r22, 0x02	; 2
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
		DIO_SetPortValue(PORT3,u8DataCopy);
     f3c:	83 e0       	ldi	r24, 0x03	; 3
     f3e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     f40:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <DIO_SetPortValue>
		DIO_SetPinValue_u8(PORT1,ENABLE,LOW);/*enable low*/
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	62 e0       	ldi	r22, 0x02	; 2
     f48:	40 e0       	ldi	r20, 0x00	; 0
     f4a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	a0 ea       	ldi	r26, 0xA0	; 160
     f54:	b0 e4       	ldi	r27, 0x40	; 64
     f56:	89 8f       	std	Y+25, r24	; 0x19
     f58:	9a 8f       	std	Y+26, r25	; 0x1a
     f5a:	ab 8f       	std	Y+27, r26	; 0x1b
     f5c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5e:	69 8d       	ldd	r22, Y+25	; 0x19
     f60:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f62:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f64:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	4a ef       	ldi	r20, 0xFA	; 250
     f6c:	54 e4       	ldi	r21, 0x44	; 68
     f6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	8d 8b       	std	Y+21, r24	; 0x15
     f78:	9e 8b       	std	Y+22, r25	; 0x16
     f7a:	af 8b       	std	Y+23, r26	; 0x17
     f7c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f7e:	6d 89       	ldd	r22, Y+21	; 0x15
     f80:	7e 89       	ldd	r23, Y+22	; 0x16
     f82:	8f 89       	ldd	r24, Y+23	; 0x17
     f84:	98 8d       	ldd	r25, Y+24	; 0x18
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e8       	ldi	r20, 0x80	; 128
     f8c:	5f e3       	ldi	r21, 0x3F	; 63
     f8e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f92:	88 23       	and	r24, r24
     f94:	2c f4       	brge	.+10     	; 0xfa0 <LcdWriteData+0x98>
		__ticks = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c 8b       	std	Y+20, r25	; 0x14
     f9c:	8b 8b       	std	Y+19, r24	; 0x13
     f9e:	3f c0       	rjmp	.+126    	; 0x101e <LcdWriteData+0x116>
	else if (__tmp > 65535)
     fa0:	6d 89       	ldd	r22, Y+21	; 0x15
     fa2:	7e 89       	ldd	r23, Y+22	; 0x16
     fa4:	8f 89       	ldd	r24, Y+23	; 0x17
     fa6:	98 8d       	ldd	r25, Y+24	; 0x18
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	3f ef       	ldi	r19, 0xFF	; 255
     fac:	4f e7       	ldi	r20, 0x7F	; 127
     fae:	57 e4       	ldi	r21, 0x47	; 71
     fb0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     fb4:	18 16       	cp	r1, r24
     fb6:	4c f5       	brge	.+82     	; 0x100a <LcdWriteData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb8:	69 8d       	ldd	r22, Y+25	; 0x19
     fba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e2       	ldi	r20, 0x20	; 32
     fc6:	51 e4       	ldi	r21, 0x41	; 65
     fc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	9c 8b       	std	Y+20, r25	; 0x14
     fde:	8b 8b       	std	Y+19, r24	; 0x13
     fe0:	0f c0       	rjmp	.+30     	; 0x1000 <LcdWriteData+0xf8>
     fe2:	88 ec       	ldi	r24, 0xC8	; 200
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9a 8b       	std	Y+18, r25	; 0x12
     fe8:	89 8b       	std	Y+17, r24	; 0x11
     fea:	89 89       	ldd	r24, Y+17	; 0x11
     fec:	9a 89       	ldd	r25, Y+18	; 0x12
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <LcdWriteData+0xe6>
     ff2:	9a 8b       	std	Y+18, r25	; 0x12
     ff4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff6:	8b 89       	ldd	r24, Y+19	; 0x13
     ff8:	9c 89       	ldd	r25, Y+20	; 0x14
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	9c 8b       	std	Y+20, r25	; 0x14
     ffe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1000:	8b 89       	ldd	r24, Y+19	; 0x13
    1002:	9c 89       	ldd	r25, Y+20	; 0x14
    1004:	00 97       	sbiw	r24, 0x00	; 0
    1006:	69 f7       	brne	.-38     	; 0xfe2 <LcdWriteData+0xda>
    1008:	14 c0       	rjmp	.+40     	; 0x1032 <LcdWriteData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100a:	6d 89       	ldd	r22, Y+21	; 0x15
    100c:	7e 89       	ldd	r23, Y+22	; 0x16
    100e:	8f 89       	ldd	r24, Y+23	; 0x17
    1010:	98 8d       	ldd	r25, Y+24	; 0x18
    1012:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	98 8b       	std	Y+16, r25	; 0x10
    1024:	8f 87       	std	Y+15, r24	; 0x0f
    1026:	8f 85       	ldd	r24, Y+15	; 0x0f
    1028:	98 89       	ldd	r25, Y+16	; 0x10
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <LcdWriteData+0x122>
    102e:	98 8b       	std	Y+16, r25	; 0x10
    1030:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(5);
		DIO_SetPinValue_u8(PORT1,ENABLE,HIGH);   /*enable high*/
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	62 e0       	ldi	r22, 0x02	; 2
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_SetPinValue_u8>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a0 e2       	ldi	r26, 0x20	; 32
    1042:	b1 e4       	ldi	r27, 0x41	; 65
    1044:	8b 87       	std	Y+11, r24	; 0x0b
    1046:	9c 87       	std	Y+12, r25	; 0x0c
    1048:	ad 87       	std	Y+13, r26	; 0x0d
    104a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4a ef       	ldi	r20, 0xFA	; 250
    105a:	54 e4       	ldi	r21, 0x44	; 68
    105c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	8f 83       	std	Y+7, r24	; 0x07
    1066:	98 87       	std	Y+8, r25	; 0x08
    1068:	a9 87       	std	Y+9, r26	; 0x09
    106a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106c:	6f 81       	ldd	r22, Y+7	; 0x07
    106e:	78 85       	ldd	r23, Y+8	; 0x08
    1070:	89 85       	ldd	r24, Y+9	; 0x09
    1072:	9a 85       	ldd	r25, Y+10	; 0x0a
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1080:	88 23       	and	r24, r24
    1082:	2c f4       	brge	.+10     	; 0x108e <LcdWriteData+0x186>
		__ticks = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9e 83       	std	Y+6, r25	; 0x06
    108a:	8d 83       	std	Y+5, r24	; 0x05
    108c:	3f c0       	rjmp	.+126    	; 0x110c <LcdWriteData+0x204>
	else if (__tmp > 65535)
    108e:	6f 81       	ldd	r22, Y+7	; 0x07
    1090:	78 85       	ldd	r23, Y+8	; 0x08
    1092:	89 85       	ldd	r24, Y+9	; 0x09
    1094:	9a 85       	ldd	r25, Y+10	; 0x0a
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	4c f5       	brge	.+82     	; 0x10f8 <LcdWriteData+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <LcdWriteData+0x1e6>
    10d0:	88 ec       	ldi	r24, 0xC8	; 200
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <LcdWriteData+0x1d4>
    10e0:	9c 83       	std	Y+4, r25	; 0x04
    10e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e4:	8d 81       	ldd	r24, Y+5	; 0x05
    10e6:	9e 81       	ldd	r25, Y+6	; 0x06
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9e 83       	std	Y+6, r25	; 0x06
    10ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ee:	8d 81       	ldd	r24, Y+5	; 0x05
    10f0:	9e 81       	ldd	r25, Y+6	; 0x06
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <LcdWriteData+0x1c8>
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <LcdWriteData+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f8:	6f 81       	ldd	r22, Y+7	; 0x07
    10fa:	78 85       	ldd	r23, Y+8	; 0x08
    10fc:	89 85       	ldd	r24, Y+9	; 0x09
    10fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1100:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <LcdWriteData+0x210>
    111c:	9a 83       	std	Y+2, r25	; 0x02
    111e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
}
    1120:	6d 96       	adiw	r28, 0x1d	; 29
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <LCD_INIT>:

void LCD_INIT()
{
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	c4 55       	subi	r28, 0x54	; 84
    1140:	d0 40       	sbci	r29, 0x00	; 0
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	fe 01       	movw	r30, r28
    114e:	ef 5a       	subi	r30, 0xAF	; 175
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 ef       	ldi	r26, 0xF0	; 240
    1158:	b1 e4       	ldi	r27, 0x41	; 65
    115a:	80 83       	st	Z, r24
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	a2 83       	std	Z+2, r26	; 0x02
    1160:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1162:	8e 01       	movw	r16, r28
    1164:	03 5b       	subi	r16, 0xB3	; 179
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	fe 01       	movw	r30, r28
    116a:	ef 5a       	subi	r30, 0xAF	; 175
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	60 81       	ld	r22, Z
    1170:	71 81       	ldd	r23, Z+1	; 0x01
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	4a ef       	ldi	r20, 0xFA	; 250
    117c:	54 e4       	ldi	r21, 0x44	; 68
    117e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	f8 01       	movw	r30, r16
    1188:	80 83       	st	Z, r24
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	a2 83       	std	Z+2, r26	; 0x02
    118e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1190:	fe 01       	movw	r30, r28
    1192:	e3 5b       	subi	r30, 0xB3	; 179
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	60 81       	ld	r22, Z
    1198:	71 81       	ldd	r23, Z+1	; 0x01
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e8       	ldi	r20, 0x80	; 128
    11a4:	5f e3       	ldi	r21, 0x3F	; 63
    11a6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11aa:	88 23       	and	r24, r24
    11ac:	44 f4       	brge	.+16     	; 0x11be <LCD_INIT+0x8c>
		__ticks = 1;
    11ae:	fe 01       	movw	r30, r28
    11b0:	e5 5b       	subi	r30, 0xB5	; 181
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
    11bc:	64 c0       	rjmp	.+200    	; 0x1286 <LCD_INIT+0x154>
	else if (__tmp > 65535)
    11be:	fe 01       	movw	r30, r28
    11c0:	e3 5b       	subi	r30, 0xB3	; 179
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	3f ef       	ldi	r19, 0xFF	; 255
    11d0:	4f e7       	ldi	r20, 0x7F	; 127
    11d2:	57 e4       	ldi	r21, 0x47	; 71
    11d4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11d8:	18 16       	cp	r1, r24
    11da:	0c f0       	brlt	.+2      	; 0x11de <LCD_INIT+0xac>
    11dc:	43 c0       	rjmp	.+134    	; 0x1264 <LCD_INIT+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11de:	fe 01       	movw	r30, r28
    11e0:	ef 5a       	subi	r30, 0xAF	; 175
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	60 81       	ld	r22, Z
    11e6:	71 81       	ldd	r23, Z+1	; 0x01
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e2       	ldi	r20, 0x20	; 32
    11f2:	51 e4       	ldi	r21, 0x41	; 65
    11f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	8e 01       	movw	r16, r28
    11fe:	05 5b       	subi	r16, 0xB5	; 181
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	bc 01       	movw	r22, r24
    1204:	cd 01       	movw	r24, r26
    1206:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    120a:	dc 01       	movw	r26, r24
    120c:	cb 01       	movw	r24, r22
    120e:	f8 01       	movw	r30, r16
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    1214:	1f c0       	rjmp	.+62     	; 0x1254 <LCD_INIT+0x122>
    1216:	fe 01       	movw	r30, r28
    1218:	e7 5b       	subi	r30, 0xB7	; 183
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	88 ec       	ldi	r24, 0xC8	; 200
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	91 83       	std	Z+1, r25	; 0x01
    1222:	80 83       	st	Z, r24
    1224:	fe 01       	movw	r30, r28
    1226:	e7 5b       	subi	r30, 0xB7	; 183
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	80 81       	ld	r24, Z
    122c:	91 81       	ldd	r25, Z+1	; 0x01
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	f1 f7       	brne	.-4      	; 0x122e <LCD_INIT+0xfc>
    1232:	fe 01       	movw	r30, r28
    1234:	e7 5b       	subi	r30, 0xB7	; 183
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	91 83       	std	Z+1, r25	; 0x01
    123a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123c:	de 01       	movw	r26, r28
    123e:	a5 5b       	subi	r26, 0xB5	; 181
    1240:	bf 4f       	sbci	r27, 0xFF	; 255
    1242:	fe 01       	movw	r30, r28
    1244:	e5 5b       	subi	r30, 0xB5	; 181
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	11 96       	adiw	r26, 0x01	; 1
    1250:	9c 93       	st	X, r25
    1252:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1254:	fe 01       	movw	r30, r28
    1256:	e5 5b       	subi	r30, 0xB5	; 181
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	d1 f6       	brne	.-76     	; 0x1216 <LCD_INIT+0xe4>
    1262:	27 c0       	rjmp	.+78     	; 0x12b2 <LCD_INIT+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	8e 01       	movw	r16, r28
    1266:	05 5b       	subi	r16, 0xB5	; 181
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	fe 01       	movw	r30, r28
    126c:	e3 5b       	subi	r30, 0xB3	; 179
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	60 81       	ld	r22, Z
    1272:	71 81       	ldd	r23, Z+1	; 0x01
    1274:	82 81       	ldd	r24, Z+2	; 0x02
    1276:	93 81       	ldd	r25, Z+3	; 0x03
    1278:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	f8 01       	movw	r30, r16
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	80 83       	st	Z, r24
    1286:	de 01       	movw	r26, r28
    1288:	a9 5b       	subi	r26, 0xB9	; 185
    128a:	bf 4f       	sbci	r27, 0xFF	; 255
    128c:	fe 01       	movw	r30, r28
    128e:	e5 5b       	subi	r30, 0xB5	; 181
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	80 81       	ld	r24, Z
    1294:	91 81       	ldd	r25, Z+1	; 0x01
    1296:	8d 93       	st	X+, r24
    1298:	9c 93       	st	X, r25
    129a:	fe 01       	movw	r30, r28
    129c:	e9 5b       	subi	r30, 0xB9	; 185
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 81       	ld	r24, Z
    12a2:	91 81       	ldd	r25, Z+1	; 0x01
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <LCD_INIT+0x172>
    12a8:	fe 01       	movw	r30, r28
    12aa:	e9 5b       	subi	r30, 0xB9	; 185
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	91 83       	std	Z+1, r25	; 0x01
    12b0:	80 83       	st	Z, r24

	/* Delay 30ms to ensure the initialization of the LCD driver */
		_delay_ms(30);

		/* Return Home  */
		LcdWriteCmd(lcd_Home);
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	0e 94 6f 06 	call	0xcde	; 0xcde <LcdWriteCmd>
    12b8:	fe 01       	movw	r30, r28
    12ba:	ed 5b       	subi	r30, 0xBD	; 189
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	a0 e7       	ldi	r26, 0x70	; 112
    12c4:	b1 e4       	ldi	r27, 0x41	; 65
    12c6:	80 83       	st	Z, r24
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	a2 83       	std	Z+2, r26	; 0x02
    12cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ce:	8e 01       	movw	r16, r28
    12d0:	01 5c       	subi	r16, 0xC1	; 193
    12d2:	1f 4f       	sbci	r17, 0xFF	; 255
    12d4:	fe 01       	movw	r30, r28
    12d6:	ed 5b       	subi	r30, 0xBD	; 189
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	4a ef       	ldi	r20, 0xFA	; 250
    12e8:	54 e4       	ldi	r21, 0x44	; 68
    12ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	f8 01       	movw	r30, r16
    12f4:	80 83       	st	Z, r24
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	a2 83       	std	Z+2, r26	; 0x02
    12fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12fc:	fe 01       	movw	r30, r28
    12fe:	ff 96       	adiw	r30, 0x3f	; 63
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	5f e3       	ldi	r21, 0x3F	; 63
    1310:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1314:	88 23       	and	r24, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <LCD_INIT+0x1f0>
		__ticks = 1;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	9e af       	std	Y+62, r25	; 0x3e
    131e:	8d af       	std	Y+61, r24	; 0x3d
    1320:	46 c0       	rjmp	.+140    	; 0x13ae <LCD_INIT+0x27c>
	else if (__tmp > 65535)
    1322:	fe 01       	movw	r30, r28
    1324:	ff 96       	adiw	r30, 0x3f	; 63
    1326:	60 81       	ld	r22, Z
    1328:	71 81       	ldd	r23, Z+1	; 0x01
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	64 f5       	brge	.+88     	; 0x1396 <LCD_INIT+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	fe 01       	movw	r30, r28
    1340:	ed 5b       	subi	r30, 0xBD	; 189
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e2       	ldi	r20, 0x20	; 32
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9e af       	std	Y+62, r25	; 0x3e
    136a:	8d af       	std	Y+61, r24	; 0x3d
    136c:	0f c0       	rjmp	.+30     	; 0x138c <LCD_INIT+0x25a>
    136e:	88 ec       	ldi	r24, 0xC8	; 200
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	9c af       	std	Y+60, r25	; 0x3c
    1374:	8b af       	std	Y+59, r24	; 0x3b
    1376:	8b ad       	ldd	r24, Y+59	; 0x3b
    1378:	9c ad       	ldd	r25, Y+60	; 0x3c
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <LCD_INIT+0x248>
    137e:	9c af       	std	Y+60, r25	; 0x3c
    1380:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1382:	8d ad       	ldd	r24, Y+61	; 0x3d
    1384:	9e ad       	ldd	r25, Y+62	; 0x3e
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	9e af       	std	Y+62, r25	; 0x3e
    138a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138c:	8d ad       	ldd	r24, Y+61	; 0x3d
    138e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	69 f7       	brne	.-38     	; 0x136e <LCD_INIT+0x23c>
    1394:	16 c0       	rjmp	.+44     	; 0x13c2 <LCD_INIT+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1396:	fe 01       	movw	r30, r28
    1398:	ff 96       	adiw	r30, 0x3f	; 63
    139a:	60 81       	ld	r22, Z
    139c:	71 81       	ldd	r23, Z+1	; 0x01
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9e af       	std	Y+62, r25	; 0x3e
    13ac:	8d af       	std	Y+61, r24	; 0x3d
    13ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    13b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    13b2:	9a af       	std	Y+58, r25	; 0x3a
    13b4:	89 af       	std	Y+57, r24	; 0x39
    13b6:	89 ad       	ldd	r24, Y+57	; 0x39
    13b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <LCD_INIT+0x288>
    13be:	9a af       	std	Y+58, r25	; 0x3a
    13c0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(15);

		/* Function Set  */
		LcdWriteCmd(lcd_FunctionSet8bit);
    13c2:	88 e3       	ldi	r24, 0x38	; 56
    13c4:	0e 94 6f 06 	call	0xcde	; 0xcde <LcdWriteCmd>
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	a0 e8       	ldi	r26, 0x80	; 128
    13ce:	bf e3       	ldi	r27, 0x3F	; 63
    13d0:	8d ab       	std	Y+53, r24	; 0x35
    13d2:	9e ab       	std	Y+54, r25	; 0x36
    13d4:	af ab       	std	Y+55, r26	; 0x37
    13d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d8:	6d a9       	ldd	r22, Y+53	; 0x35
    13da:	7e a9       	ldd	r23, Y+54	; 0x36
    13dc:	8f a9       	ldd	r24, Y+55	; 0x37
    13de:	98 ad       	ldd	r25, Y+56	; 0x38
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	4a ef       	ldi	r20, 0xFA	; 250
    13e6:	54 e4       	ldi	r21, 0x44	; 68
    13e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	89 ab       	std	Y+49, r24	; 0x31
    13f2:	9a ab       	std	Y+50, r25	; 0x32
    13f4:	ab ab       	std	Y+51, r26	; 0x33
    13f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13f8:	69 a9       	ldd	r22, Y+49	; 0x31
    13fa:	7a a9       	ldd	r23, Y+50	; 0x32
    13fc:	8b a9       	ldd	r24, Y+51	; 0x33
    13fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e8       	ldi	r20, 0x80	; 128
    1406:	5f e3       	ldi	r21, 0x3F	; 63
    1408:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    140c:	88 23       	and	r24, r24
    140e:	2c f4       	brge	.+10     	; 0x141a <LCD_INIT+0x2e8>
		__ticks = 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	98 ab       	std	Y+48, r25	; 0x30
    1416:	8f a7       	std	Y+47, r24	; 0x2f
    1418:	3f c0       	rjmp	.+126    	; 0x1498 <LCD_INIT+0x366>
	else if (__tmp > 65535)
    141a:	69 a9       	ldd	r22, Y+49	; 0x31
    141c:	7a a9       	ldd	r23, Y+50	; 0x32
    141e:	8b a9       	ldd	r24, Y+51	; 0x33
    1420:	9c a9       	ldd	r25, Y+52	; 0x34
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	3f ef       	ldi	r19, 0xFF	; 255
    1426:	4f e7       	ldi	r20, 0x7F	; 127
    1428:	57 e4       	ldi	r21, 0x47	; 71
    142a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    142e:	18 16       	cp	r1, r24
    1430:	4c f5       	brge	.+82     	; 0x1484 <LCD_INIT+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1432:	6d a9       	ldd	r22, Y+53	; 0x35
    1434:	7e a9       	ldd	r23, Y+54	; 0x36
    1436:	8f a9       	ldd	r24, Y+55	; 0x37
    1438:	98 ad       	ldd	r25, Y+56	; 0x38
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e2       	ldi	r20, 0x20	; 32
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	98 ab       	std	Y+48, r25	; 0x30
    1458:	8f a7       	std	Y+47, r24	; 0x2f
    145a:	0f c0       	rjmp	.+30     	; 0x147a <LCD_INIT+0x348>
    145c:	88 ec       	ldi	r24, 0xC8	; 200
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	9e a7       	std	Y+46, r25	; 0x2e
    1462:	8d a7       	std	Y+45, r24	; 0x2d
    1464:	8d a5       	ldd	r24, Y+45	; 0x2d
    1466:	9e a5       	ldd	r25, Y+46	; 0x2e
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	f1 f7       	brne	.-4      	; 0x1468 <LCD_INIT+0x336>
    146c:	9e a7       	std	Y+46, r25	; 0x2e
    146e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1470:	8f a5       	ldd	r24, Y+47	; 0x2f
    1472:	98 a9       	ldd	r25, Y+48	; 0x30
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	98 ab       	std	Y+48, r25	; 0x30
    1478:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147a:	8f a5       	ldd	r24, Y+47	; 0x2f
    147c:	98 a9       	ldd	r25, Y+48	; 0x30
    147e:	00 97       	sbiw	r24, 0x00	; 0
    1480:	69 f7       	brne	.-38     	; 0x145c <LCD_INIT+0x32a>
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <LCD_INIT+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1484:	69 a9       	ldd	r22, Y+49	; 0x31
    1486:	7a a9       	ldd	r23, Y+50	; 0x32
    1488:	8b a9       	ldd	r24, Y+51	; 0x33
    148a:	9c a9       	ldd	r25, Y+52	; 0x34
    148c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	98 ab       	std	Y+48, r25	; 0x30
    1496:	8f a7       	std	Y+47, r24	; 0x2f
    1498:	8f a5       	ldd	r24, Y+47	; 0x2f
    149a:	98 a9       	ldd	r25, Y+48	; 0x30
    149c:	9c a7       	std	Y+44, r25	; 0x2c
    149e:	8b a7       	std	Y+43, r24	; 0x2b
    14a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	f1 f7       	brne	.-4      	; 0x14a4 <LCD_INIT+0x372>
    14a8:	9c a7       	std	Y+44, r25	; 0x2c
    14aa:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);

		/* Display ON OFF Control */
		LcdWriteCmd(lcd_DisplayOn);
    14ac:	8c e0       	ldi	r24, 0x0C	; 12
    14ae:	0e 94 6f 06 	call	0xcde	; 0xcde <LcdWriteCmd>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 e8       	ldi	r26, 0x80	; 128
    14b8:	bf e3       	ldi	r27, 0x3F	; 63
    14ba:	8f a3       	std	Y+39, r24	; 0x27
    14bc:	98 a7       	std	Y+40, r25	; 0x28
    14be:	a9 a7       	std	Y+41, r26	; 0x29
    14c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	6f a1       	ldd	r22, Y+39	; 0x27
    14c4:	78 a5       	ldd	r23, Y+40	; 0x28
    14c6:	89 a5       	ldd	r24, Y+41	; 0x29
    14c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a ef       	ldi	r20, 0xFA	; 250
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8b a3       	std	Y+35, r24	; 0x23
    14dc:	9c a3       	std	Y+36, r25	; 0x24
    14de:	ad a3       	std	Y+37, r26	; 0x25
    14e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14e2:	6b a1       	ldd	r22, Y+35	; 0x23
    14e4:	7c a1       	ldd	r23, Y+36	; 0x24
    14e6:	8d a1       	ldd	r24, Y+37	; 0x25
    14e8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <LCD_INIT+0x3d2>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9a a3       	std	Y+34, r25	; 0x22
    1500:	89 a3       	std	Y+33, r24	; 0x21
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <LCD_INIT+0x450>
	else if (__tmp > 65535)
    1504:	6b a1       	ldd	r22, Y+35	; 0x23
    1506:	7c a1       	ldd	r23, Y+36	; 0x24
    1508:	8d a1       	ldd	r24, Y+37	; 0x25
    150a:	9e a1       	ldd	r25, Y+38	; 0x26
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <LCD_INIT+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	6f a1       	ldd	r22, Y+39	; 0x27
    151e:	78 a5       	ldd	r23, Y+40	; 0x28
    1520:	89 a5       	ldd	r24, Y+41	; 0x29
    1522:	9a a5       	ldd	r25, Y+42	; 0x2a
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9a a3       	std	Y+34, r25	; 0x22
    1542:	89 a3       	std	Y+33, r24	; 0x21
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <LCD_INIT+0x432>
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	98 a3       	std	Y+32, r25	; 0x20
    154c:	8f 8f       	std	Y+31, r24	; 0x1f
    154e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1550:	98 a1       	ldd	r25, Y+32	; 0x20
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_INIT+0x420>
    1556:	98 a3       	std	Y+32, r25	; 0x20
    1558:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	89 a1       	ldd	r24, Y+33	; 0x21
    155c:	9a a1       	ldd	r25, Y+34	; 0x22
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9a a3       	std	Y+34, r25	; 0x22
    1562:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	89 a1       	ldd	r24, Y+33	; 0x21
    1566:	9a a1       	ldd	r25, Y+34	; 0x22
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <LCD_INIT+0x414>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <LCD_INIT+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	6b a1       	ldd	r22, Y+35	; 0x23
    1570:	7c a1       	ldd	r23, Y+36	; 0x24
    1572:	8d a1       	ldd	r24, Y+37	; 0x25
    1574:	9e a1       	ldd	r25, Y+38	; 0x26
    1576:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9a a3       	std	Y+34, r25	; 0x22
    1580:	89 a3       	std	Y+33, r24	; 0x21
    1582:	89 a1       	ldd	r24, Y+33	; 0x21
    1584:	9a a1       	ldd	r25, Y+34	; 0x22
    1586:	9e 8f       	std	Y+30, r25	; 0x1e
    1588:	8d 8f       	std	Y+29, r24	; 0x1d
    158a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    158c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <LCD_INIT+0x45c>
    1592:	9e 8f       	std	Y+30, r25	; 0x1e
    1594:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		/* Clear Display */
		LcdWriteCmd(lcd_Clear);
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	0e 94 6f 06 	call	0xcde	; 0xcde <LcdWriteCmd>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e7       	ldi	r26, 0x70	; 112
    15a2:	b1 e4       	ldi	r27, 0x41	; 65
    15a4:	89 8f       	std	Y+25, r24	; 0x19
    15a6:	9a 8f       	std	Y+26, r25	; 0x1a
    15a8:	ab 8f       	std	Y+27, r26	; 0x1b
    15aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ac:	69 8d       	ldd	r22, Y+25	; 0x19
    15ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a ef       	ldi	r20, 0xFA	; 250
    15ba:	54 e4       	ldi	r21, 0x44	; 68
    15bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	8d 8b       	std	Y+21, r24	; 0x15
    15c6:	9e 8b       	std	Y+22, r25	; 0x16
    15c8:	af 8b       	std	Y+23, r26	; 0x17
    15ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15cc:	6d 89       	ldd	r22, Y+21	; 0x15
    15ce:	7e 89       	ldd	r23, Y+22	; 0x16
    15d0:	8f 89       	ldd	r24, Y+23	; 0x17
    15d2:	98 8d       	ldd	r25, Y+24	; 0x18
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e8       	ldi	r20, 0x80	; 128
    15da:	5f e3       	ldi	r21, 0x3F	; 63
    15dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15e0:	88 23       	and	r24, r24
    15e2:	2c f4       	brge	.+10     	; 0x15ee <LCD_INIT+0x4bc>
		__ticks = 1;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9c 8b       	std	Y+20, r25	; 0x14
    15ea:	8b 8b       	std	Y+19, r24	; 0x13
    15ec:	3f c0       	rjmp	.+126    	; 0x166c <LCD_INIT+0x53a>
	else if (__tmp > 65535)
    15ee:	6d 89       	ldd	r22, Y+21	; 0x15
    15f0:	7e 89       	ldd	r23, Y+22	; 0x16
    15f2:	8f 89       	ldd	r24, Y+23	; 0x17
    15f4:	98 8d       	ldd	r25, Y+24	; 0x18
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1602:	18 16       	cp	r1, r24
    1604:	4c f5       	brge	.+82     	; 0x1658 <LCD_INIT+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	69 8d       	ldd	r22, Y+25	; 0x19
    1608:	7a 8d       	ldd	r23, Y+26	; 0x1a
    160a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	bc 01       	movw	r22, r24
    1620:	cd 01       	movw	r24, r26
    1622:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9c 8b       	std	Y+20, r25	; 0x14
    162c:	8b 8b       	std	Y+19, r24	; 0x13
    162e:	0f c0       	rjmp	.+30     	; 0x164e <LCD_INIT+0x51c>
    1630:	88 ec       	ldi	r24, 0xC8	; 200
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9a 8b       	std	Y+18, r25	; 0x12
    1636:	89 8b       	std	Y+17, r24	; 0x11
    1638:	89 89       	ldd	r24, Y+17	; 0x11
    163a:	9a 89       	ldd	r25, Y+18	; 0x12
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	f1 f7       	brne	.-4      	; 0x163c <LCD_INIT+0x50a>
    1640:	9a 8b       	std	Y+18, r25	; 0x12
    1642:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1644:	8b 89       	ldd	r24, Y+19	; 0x13
    1646:	9c 89       	ldd	r25, Y+20	; 0x14
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	9c 8b       	std	Y+20, r25	; 0x14
    164c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    164e:	8b 89       	ldd	r24, Y+19	; 0x13
    1650:	9c 89       	ldd	r25, Y+20	; 0x14
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	69 f7       	brne	.-38     	; 0x1630 <LCD_INIT+0x4fe>
    1656:	14 c0       	rjmp	.+40     	; 0x1680 <LCD_INIT+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1658:	6d 89       	ldd	r22, Y+21	; 0x15
    165a:	7e 89       	ldd	r23, Y+22	; 0x16
    165c:	8f 89       	ldd	r24, Y+23	; 0x17
    165e:	98 8d       	ldd	r25, Y+24	; 0x18
    1660:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
    166c:	8b 89       	ldd	r24, Y+19	; 0x13
    166e:	9c 89       	ldd	r25, Y+20	; 0x14
    1670:	98 8b       	std	Y+16, r25	; 0x10
    1672:	8f 87       	std	Y+15, r24	; 0x0f
    1674:	8f 85       	ldd	r24, Y+15	; 0x0f
    1676:	98 89       	ldd	r25, Y+16	; 0x10
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <LCD_INIT+0x546>
    167c:	98 8b       	std	Y+16, r25	; 0x10
    167e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(15);

		/* Entry Mode Set  */
		LcdWriteCmd(lcd_EntryMode);
    1680:	86 e0       	ldi	r24, 0x06	; 6
    1682:	0e 94 6f 06 	call	0xcde	; 0xcde <LcdWriteCmd>
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e0       	ldi	r26, 0x00	; 0
    168c:	b0 e4       	ldi	r27, 0x40	; 64
    168e:	8b 87       	std	Y+11, r24	; 0x0b
    1690:	9c 87       	std	Y+12, r25	; 0x0c
    1692:	ad 87       	std	Y+13, r26	; 0x0d
    1694:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1696:	6b 85       	ldd	r22, Y+11	; 0x0b
    1698:	7c 85       	ldd	r23, Y+12	; 0x0c
    169a:	8d 85       	ldd	r24, Y+13	; 0x0d
    169c:	9e 85       	ldd	r25, Y+14	; 0x0e
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4a ef       	ldi	r20, 0xFA	; 250
    16a4:	54 e4       	ldi	r21, 0x44	; 68
    16a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	8f 83       	std	Y+7, r24	; 0x07
    16b0:	98 87       	std	Y+8, r25	; 0x08
    16b2:	a9 87       	std	Y+9, r26	; 0x09
    16b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b6:	6f 81       	ldd	r22, Y+7	; 0x07
    16b8:	78 85       	ldd	r23, Y+8	; 0x08
    16ba:	89 85       	ldd	r24, Y+9	; 0x09
    16bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <LCD_INIT+0x5a6>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9e 83       	std	Y+6, r25	; 0x06
    16d4:	8d 83       	std	Y+5, r24	; 0x05
    16d6:	3f c0       	rjmp	.+126    	; 0x1756 <LCD_INIT+0x624>
	else if (__tmp > 65535)
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	3f ef       	ldi	r19, 0xFF	; 255
    16e4:	4f e7       	ldi	r20, 0x7F	; 127
    16e6:	57 e4       	ldi	r21, 0x47	; 71
    16e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16ec:	18 16       	cp	r1, r24
    16ee:	4c f5       	brge	.+82     	; 0x1742 <LCD_INIT+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e2       	ldi	r20, 0x20	; 32
    16fe:	51 e4       	ldi	r21, 0x41	; 65
    1700:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	9e 83       	std	Y+6, r25	; 0x06
    1716:	8d 83       	std	Y+5, r24	; 0x05
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <LCD_INIT+0x606>
    171a:	88 ec       	ldi	r24, 0xC8	; 200
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9c 83       	std	Y+4, r25	; 0x04
    1720:	8b 83       	std	Y+3, r24	; 0x03
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_INIT+0x5f4>
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
    173a:	9e 81       	ldd	r25, Y+6	; 0x06
    173c:	00 97       	sbiw	r24, 0x00	; 0
    173e:	69 f7       	brne	.-38     	; 0x171a <LCD_INIT+0x5e8>
    1740:	14 c0       	rjmp	.+40     	; 0x176a <LCD_INIT+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1742:	6f 81       	ldd	r22, Y+7	; 0x07
    1744:	78 85       	ldd	r23, Y+8	; 0x08
    1746:	89 85       	ldd	r24, Y+9	; 0x09
    1748:	9a 85       	ldd	r25, Y+10	; 0x0a
    174a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	9a 83       	std	Y+2, r25	; 0x02
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <LCD_INIT+0x630>
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
//		DIO_SetPinDirection_u8(PORT3,PIN7,OUTPUT);
	//	DIO_SetPinValue_u8(PORT3,PIN7,HIGH);
}
    176a:	cc 5a       	subi	r28, 0xAC	; 172
    176c:	df 4f       	sbci	r29, 0xFF	; 255
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	de bf       	out	0x3e, r29	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	cd bf       	out	0x3d, r28	; 61
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	08 95       	ret

00001782 <LCD_String>:
void LCD_String (u8 *str)		/* Send words to LCD function */
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	62 97       	sbiw	r28, 0x12	; 18
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	9a 8b       	std	Y+18, r25	; 0x12
    1798:	89 8b       	std	Y+17, r24	; 0x11
	int i;
	for(i=0;str[i]!='\0';i++)		/* Send each char of string till the end */
    179a:	18 8a       	std	Y+16, r1	; 0x10
    179c:	1f 86       	std	Y+15, r1	; 0x0f
    179e:	81 c0       	rjmp	.+258    	; 0x18a2 <LCD_String+0x120>
	{
		LcdWriteData (str[i]);
    17a0:	2f 85       	ldd	r18, Y+15	; 0x0f
    17a2:	38 89       	ldd	r19, Y+16	; 0x10
    17a4:	89 89       	ldd	r24, Y+17	; 0x11
    17a6:	9a 89       	ldd	r25, Y+18	; 0x12
    17a8:	fc 01       	movw	r30, r24
    17aa:	e2 0f       	add	r30, r18
    17ac:	f3 1f       	adc	r31, r19
    17ae:	80 81       	ld	r24, Z
    17b0:	0e 94 84 07 	call	0xf08	; 0xf08 <LcdWriteData>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e4       	ldi	r27, 0x40	; 64
    17bc:	8b 87       	std	Y+11, r24	; 0x0b
    17be:	9c 87       	std	Y+12, r25	; 0x0c
    17c0:	ad 87       	std	Y+13, r26	; 0x0d
    17c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a ef       	ldi	r20, 0xFA	; 250
    17d2:	54 e4       	ldi	r21, 0x44	; 68
    17d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8f 83       	std	Y+7, r24	; 0x07
    17de:	98 87       	std	Y+8, r25	; 0x08
    17e0:	a9 87       	std	Y+9, r26	; 0x09
    17e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	2c f4       	brge	.+10     	; 0x1806 <LCD_String+0x84>
		__ticks = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	3f c0       	rjmp	.+126    	; 0x1884 <LCD_String+0x102>
	else if (__tmp > 65535)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	4c f5       	brge	.+82     	; 0x1870 <LCD_String+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1820:	7c 85       	ldd	r23, Y+12	; 0x0c
    1822:	8d 85       	ldd	r24, Y+13	; 0x0d
    1824:	9e 85       	ldd	r25, Y+14	; 0x0e
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <LCD_String+0xe4>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	8b 83       	std	Y+3, r24	; 0x03
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <LCD_String+0xd2>
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <LCD_String+0xc6>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <LCD_String+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <LCD_String+0x10e>
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	//	DIO_SetPinValue_u8(PORT3,PIN7,HIGH);
}
void LCD_String (u8 *str)		/* Send words to LCD function */
{
	int i;
	for(i=0;str[i]!='\0';i++)		/* Send each char of string till the end */
    1898:	8f 85       	ldd	r24, Y+15	; 0x0f
    189a:	98 89       	ldd	r25, Y+16	; 0x10
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	98 8b       	std	Y+16, r25	; 0x10
    18a0:	8f 87       	std	Y+15, r24	; 0x0f
    18a2:	2f 85       	ldd	r18, Y+15	; 0x0f
    18a4:	38 89       	ldd	r19, Y+16	; 0x10
    18a6:	89 89       	ldd	r24, Y+17	; 0x11
    18a8:	9a 89       	ldd	r25, Y+18	; 0x12
    18aa:	fc 01       	movw	r30, r24
    18ac:	e2 0f       	add	r30, r18
    18ae:	f3 1f       	adc	r31, r19
    18b0:	80 81       	ld	r24, Z
    18b2:	88 23       	and	r24, r24
    18b4:	09 f0       	breq	.+2      	; 0x18b8 <LCD_String+0x136>
    18b6:	74 cf       	rjmp	.-280    	; 0x17a0 <LCD_String+0x1e>
	{
		LcdWriteData (str[i]);
		_delay_ms(2);
	}
}
    18b8:	62 96       	adiw	r28, 0x12	; 18
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <PORT_INIT>:


void PORT_INIT()
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(PORT3,PORT_OUTPUT);
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	6f ef       	ldi	r22, 0xFF	; 255
    18d6:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_SetPortDirection>
	DIO_SetPortDirection(PORT1,PORT_OUTPUT);
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	6f ef       	ldi	r22, 0xFF	; 255
    18de:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <DIO_SetPortDirection>
}
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <GetRowcol>:

void GetRowcol(u8 row, u8 col)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <GetRowcol+0x6>
    18ee:	0f 92       	push	r0
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	8a 83       	std	Y+2, r24	; 0x02
    18f6:	6b 83       	std	Y+3, r22	; 0x03
u8 locpos=col+row*0x40;
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	00 24       	eor	r0, r0
    1900:	96 95       	lsr	r25
    1902:	87 95       	ror	r24
    1904:	07 94       	ror	r0
    1906:	96 95       	lsr	r25
    1908:	87 95       	ror	r24
    190a:	07 94       	ror	r0
    190c:	98 2f       	mov	r25, r24
    190e:	80 2d       	mov	r24, r0
    1910:	98 2f       	mov	r25, r24
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	89 0f       	add	r24, r25
    1916:	89 83       	std	Y+1, r24	; 0x01
locpos|=0x80;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	89 83       	std	Y+1, r24	; 0x01
LcdWriteCmd(locpos);
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	0e 94 6f 06 	call	0xcde	; 0xcde <LcdWriteCmd>
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <DIO_SetPinDirection_u8>:
#include"STD_TYPES.h"
#include"MATH.h"
#include"DIO_PRIVATE.h"
#include"DIO_INTERFACE.h"
void DIO_SetPinDirection_u8(u8 u8PortId_Copy,u8 u8PinId_copy,u8 u8Value_copy)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	27 97       	sbiw	r28, 0x07	; 7
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	6a 83       	std	Y+2, r22	; 0x02
    1948:	4b 83       	std	Y+3, r20	; 0x03


if(u8PortId_Copy<4 && u8PinId_copy<=7)
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	08 f0       	brcs	.+2      	; 0x1952 <DIO_SetPinDirection_u8+0x22>
    1950:	ee c0       	rjmp	.+476    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	88 30       	cpi	r24, 0x08	; 8
    1956:	08 f0       	brcs	.+2      	; 0x195a <DIO_SetPinDirection_u8+0x2a>
    1958:	ea c0       	rjmp	.+468    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
{
	if(u8Value_copy==INPUT)
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	88 23       	and	r24, r24
    195e:	09 f0       	breq	.+2      	; 0x1962 <DIO_SetPinDirection_u8+0x32>
    1960:	74 c0       	rjmp	.+232    	; 0x1a4a <DIO_SetPinDirection_u8+0x11a>
	{
switch(u8PortId_Copy)
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	3f 83       	std	Y+7, r19	; 0x07
    196a:	2e 83       	std	Y+6, r18	; 0x06
    196c:	8e 81       	ldd	r24, Y+6	; 0x06
    196e:	9f 81       	ldd	r25, Y+7	; 0x07
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	91 05       	cpc	r25, r1
    1974:	59 f1       	breq	.+86     	; 0x19cc <DIO_SetPinDirection_u8+0x9c>
    1976:	2e 81       	ldd	r18, Y+6	; 0x06
    1978:	3f 81       	ldd	r19, Y+7	; 0x07
    197a:	22 30       	cpi	r18, 0x02	; 2
    197c:	31 05       	cpc	r19, r1
    197e:	2c f4       	brge	.+10     	; 0x198a <DIO_SetPinDirection_u8+0x5a>
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	69 f0       	breq	.+26     	; 0x19a2 <DIO_SetPinDirection_u8+0x72>
    1988:	d2 c0       	rjmp	.+420    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
    198a:	2e 81       	ldd	r18, Y+6	; 0x06
    198c:	3f 81       	ldd	r19, Y+7	; 0x07
    198e:	22 30       	cpi	r18, 0x02	; 2
    1990:	31 05       	cpc	r19, r1
    1992:	89 f1       	breq	.+98     	; 0x19f6 <DIO_SetPinDirection_u8+0xc6>
    1994:	8e 81       	ldd	r24, Y+6	; 0x06
    1996:	9f 81       	ldd	r25, Y+7	; 0x07
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	91 05       	cpc	r25, r1
    199c:	09 f4       	brne	.+2      	; 0x19a0 <DIO_SetPinDirection_u8+0x70>
    199e:	40 c0       	rjmp	.+128    	; 0x1a20 <DIO_SetPinDirection_u8+0xf0>
    19a0:	c6 c0       	rjmp	.+396    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
{
case PORT0 :CLEAR_BIT( DDRA_REG,u8PinId_copy); break;
    19a2:	aa e3       	ldi	r26, 0x3A	; 58
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ea e3       	ldi	r30, 0x3A	; 58
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_SetPinDirection_u8+0x90>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_SetPinDirection_u8+0x8c>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	b1 c0       	rjmp	.+354    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
case PORT1 :CLEAR_BIT( DDRB_REG,u8PinId_copy); break;
    19cc:	a7 e3       	ldi	r26, 0x37	; 55
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e7 e3       	ldi	r30, 0x37	; 55
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	48 2f       	mov	r20, r24
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 2e       	mov	r0, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <DIO_SetPinDirection_u8+0xba>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	0a 94       	dec	r0
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <DIO_SetPinDirection_u8+0xb6>
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	8c 93       	st	X, r24
    19f4:	9c c0       	rjmp	.+312    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
case PORT2 :CLEAR_BIT( DDRC_REG,u8PinId_copy); break;
    19f6:	a4 e3       	ldi	r26, 0x34	; 52
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e4 e3       	ldi	r30, 0x34	; 52
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	48 2f       	mov	r20, r24
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	02 2e       	mov	r0, r18
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <DIO_SetPinDirection_u8+0xe4>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	0a 94       	dec	r0
    1a16:	e2 f7       	brpl	.-8      	; 0x1a10 <DIO_SetPinDirection_u8+0xe0>
    1a18:	80 95       	com	r24
    1a1a:	84 23       	and	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	87 c0       	rjmp	.+270    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
case PORT3 :CLEAR_BIT( DDRD_REG,u8PinId_copy); break;
    1a20:	a1 e3       	ldi	r26, 0x31	; 49
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e1 e3       	ldi	r30, 0x31	; 49
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <DIO_SetPinDirection_u8+0x10e>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <DIO_SetPinDirection_u8+0x10a>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	72 c0       	rjmp	.+228    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
}
	}
	else if (u8Value_copy==OUTPUT)
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	09 f0       	breq	.+2      	; 0x1a52 <DIO_SetPinDirection_u8+0x122>
    1a50:	6e c0       	rjmp	.+220    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
	{
		switch(u8PortId_Copy)
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	3d 83       	std	Y+5, r19	; 0x05
    1a5a:	2c 83       	std	Y+4, r18	; 0x04
    1a5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	49 f1       	breq	.+82     	; 0x1ab8 <DIO_SetPinDirection_u8+0x188>
    1a66:	2c 81       	ldd	r18, Y+4	; 0x04
    1a68:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <DIO_SetPinDirection_u8+0x14a>
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	61 f0       	breq	.+24     	; 0x1a90 <DIO_SetPinDirection_u8+0x160>
    1a78:	5a c0       	rjmp	.+180    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
    1a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	71 f1       	breq	.+92     	; 0x1ae0 <DIO_SetPinDirection_u8+0x1b0>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	83 30       	cpi	r24, 0x03	; 3
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	e9 f1       	breq	.+122    	; 0x1b08 <DIO_SetPinDirection_u8+0x1d8>
    1a8e:	4f c0       	rjmp	.+158    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
		{
		case PORT0 :SET_BIT( DDRA_REG,u8PinId_copy); break;
    1a90:	aa e3       	ldi	r26, 0x3A	; 58
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	ea e3       	ldi	r30, 0x3A	; 58
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_SetPinDirection_u8+0x17e>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_SetPinDirection_u8+0x17a>
    1ab2:	84 2b       	or	r24, r20
    1ab4:	8c 93       	st	X, r24
    1ab6:	3b c0       	rjmp	.+118    	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
		case PORT1 :SET_BIT( DDRB_REG,u8PinId_copy); break;
    1ab8:	a7 e3       	ldi	r26, 0x37	; 55
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e7 e3       	ldi	r30, 0x37	; 55
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_SetPinDirection_u8+0x1a6>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_SetPinDirection_u8+0x1a2>
    1ada:	84 2b       	or	r24, r20
    1adc:	8c 93       	st	X, r24
    1ade:	27 c0       	rjmp	.+78     	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
		case PORT2 :SET_BIT( DDRC_REG,u8PinId_copy); break;
    1ae0:	a4 e3       	ldi	r26, 0x34	; 52
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e4 e3       	ldi	r30, 0x34	; 52
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <DIO_SetPinDirection_u8+0x1ce>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <DIO_SetPinDirection_u8+0x1ca>
    1b02:	84 2b       	or	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	13 c0       	rjmp	.+38     	; 0x1b2e <DIO_SetPinDirection_u8+0x1fe>
		case PORT3 :SET_BIT( DDRD_REG,u8PinId_copy); break;
    1b08:	a1 e3       	ldi	r26, 0x31	; 49
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e1 e3       	ldi	r30, 0x31	; 49
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <DIO_SetPinDirection_u8+0x1f6>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <DIO_SetPinDirection_u8+0x1f2>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24

}
else
{/*DO NOTHING*/}

}
    1b2e:	27 96       	adiw	r28, 0x07	; 7
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <DIO_SetPinValue_u8>:




void DIO_SetPinValue_u8(u8 u8PortId_Copy,u8 u8PinId_copy,u8 u8Value_copy)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	27 97       	sbiw	r28, 0x07	; 7
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
    1b58:	4b 83       	std	Y+3, r20	; 0x03


if(u8PortId_Copy<4 && u8PinId_copy<=7)
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	08 f0       	brcs	.+2      	; 0x1b62 <DIO_SetPinValue_u8+0x22>
    1b60:	ee c0       	rjmp	.+476    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	88 30       	cpi	r24, 0x08	; 8
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <DIO_SetPinValue_u8+0x2a>
    1b68:	ea c0       	rjmp	.+468    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
{
	if(u8Value_copy==LOW)
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f0       	breq	.+2      	; 0x1b72 <DIO_SetPinValue_u8+0x32>
    1b70:	74 c0       	rjmp	.+232    	; 0x1c5a <DIO_SetPinValue_u8+0x11a>
	{
switch(u8PortId_Copy)
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3f 83       	std	Y+7, r19	; 0x07
    1b7a:	2e 83       	std	Y+6, r18	; 0x06
    1b7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b80:	81 30       	cpi	r24, 0x01	; 1
    1b82:	91 05       	cpc	r25, r1
    1b84:	59 f1       	breq	.+86     	; 0x1bdc <DIO_SetPinValue_u8+0x9c>
    1b86:	2e 81       	ldd	r18, Y+6	; 0x06
    1b88:	3f 81       	ldd	r19, Y+7	; 0x07
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <DIO_SetPinValue_u8+0x5a>
    1b90:	8e 81       	ldd	r24, Y+6	; 0x06
    1b92:	9f 81       	ldd	r25, Y+7	; 0x07
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f0       	breq	.+26     	; 0x1bb2 <DIO_SetPinValue_u8+0x72>
    1b98:	d2 c0       	rjmp	.+420    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
    1b9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b9e:	22 30       	cpi	r18, 0x02	; 2
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	89 f1       	breq	.+98     	; 0x1c06 <DIO_SetPinValue_u8+0xc6>
    1ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba8:	83 30       	cpi	r24, 0x03	; 3
    1baa:	91 05       	cpc	r25, r1
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <DIO_SetPinValue_u8+0x70>
    1bae:	40 c0       	rjmp	.+128    	; 0x1c30 <DIO_SetPinValue_u8+0xf0>
    1bb0:	c6 c0       	rjmp	.+396    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
{
case PORT0 :CLEAR_BIT( PORTA_REG,u8PinId_copy); break;
    1bb2:	ab e3       	ldi	r26, 0x3B	; 59
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_SetPinValue_u8+0x90>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_SetPinValue_u8+0x8c>
    1bd4:	80 95       	com	r24
    1bd6:	84 23       	and	r24, r20
    1bd8:	8c 93       	st	X, r24
    1bda:	b1 c0       	rjmp	.+354    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
case PORT1 :CLEAR_BIT( PORTB_REG,u8PinId_copy); break;
    1bdc:	a8 e3       	ldi	r26, 0x38	; 56
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e8 e3       	ldi	r30, 0x38	; 56
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_SetPinValue_u8+0xba>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_SetPinValue_u8+0xb6>
    1bfe:	80 95       	com	r24
    1c00:	84 23       	and	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	9c c0       	rjmp	.+312    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
case PORT2 :CLEAR_BIT( PORTC_REG,u8PinId_copy); break;
    1c06:	a5 e3       	ldi	r26, 0x35	; 53
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e5 e3       	ldi	r30, 0x35	; 53
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_SetPinValue_u8+0xe4>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_SetPinValue_u8+0xe0>
    1c28:	80 95       	com	r24
    1c2a:	84 23       	and	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	87 c0       	rjmp	.+270    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
case PORT3 :CLEAR_BIT( PORTD_REG,u8PinId_copy); break;
    1c30:	a2 e3       	ldi	r26, 0x32	; 50
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e2 e3       	ldi	r30, 0x32	; 50
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_SetPinValue_u8+0x10e>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_SetPinValue_u8+0x10a>
    1c52:	80 95       	com	r24
    1c54:	84 23       	and	r24, r20
    1c56:	8c 93       	st	X, r24
    1c58:	72 c0       	rjmp	.+228    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
}
	}
	else if (u8Value_copy==HIGH)
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <DIO_SetPinValue_u8+0x122>
    1c60:	6e c0       	rjmp	.+220    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
	{
		switch(u8PortId_Copy)
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	3d 83       	std	Y+5, r19	; 0x05
    1c6a:	2c 83       	std	Y+4, r18	; 0x04
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	91 05       	cpc	r25, r1
    1c74:	49 f1       	breq	.+82     	; 0x1cc8 <DIO_SetPinValue_u8+0x188>
    1c76:	2c 81       	ldd	r18, Y+4	; 0x04
    1c78:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <DIO_SetPinValue_u8+0x14a>
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	61 f0       	breq	.+24     	; 0x1ca0 <DIO_SetPinValue_u8+0x160>
    1c88:	5a c0       	rjmp	.+180    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
    1c8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	71 f1       	breq	.+92     	; 0x1cf0 <DIO_SetPinValue_u8+0x1b0>
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	e9 f1       	breq	.+122    	; 0x1d18 <DIO_SetPinValue_u8+0x1d8>
    1c9e:	4f c0       	rjmp	.+158    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
		{
		case PORT0 :SET_BIT( PORTA_REG,u8PinId_copy); break;
    1ca0:	ab e3       	ldi	r26, 0x3B	; 59
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	eb e3       	ldi	r30, 0x3B	; 59
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	48 2f       	mov	r20, r24
    1cac:	8a 81       	ldd	r24, Y+2	; 0x02
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 2e       	mov	r0, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <DIO_SetPinValue_u8+0x17e>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	0a 94       	dec	r0
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <DIO_SetPinValue_u8+0x17a>
    1cc2:	84 2b       	or	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	3b c0       	rjmp	.+118    	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
		case PORT1 :SET_BIT( PORTB_REG,u8PinId_copy); break;
    1cc8:	a8 e3       	ldi	r26, 0x38	; 56
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e8 e3       	ldi	r30, 0x38	; 56
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <DIO_SetPinValue_u8+0x1a6>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <DIO_SetPinValue_u8+0x1a2>
    1cea:	84 2b       	or	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	27 c0       	rjmp	.+78     	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
		case PORT2 :SET_BIT( PORTC_REG,u8PinId_copy); break;
    1cf0:	a5 e3       	ldi	r26, 0x35	; 53
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e5 e3       	ldi	r30, 0x35	; 53
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_SetPinValue_u8+0x1ce>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_SetPinValue_u8+0x1ca>
    1d12:	84 2b       	or	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	13 c0       	rjmp	.+38     	; 0x1d3e <DIO_SetPinValue_u8+0x1fe>
		case PORT3 :SET_BIT( PORTD_REG,u8PinId_copy); break;
    1d18:	a2 e3       	ldi	r26, 0x32	; 50
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	e2 e3       	ldi	r30, 0x32	; 50
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	48 2f       	mov	r20, r24
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	02 2e       	mov	r0, r18
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <DIO_SetPinValue_u8+0x1f6>
    1d32:	88 0f       	add	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	0a 94       	dec	r0
    1d38:	e2 f7       	brpl	.-8      	; 0x1d32 <DIO_SetPinValue_u8+0x1f2>
    1d3a:	84 2b       	or	r24, r20
    1d3c:	8c 93       	st	X, r24

}
else
{/*DO NOTHING*/}

}
    1d3e:	27 96       	adiw	r28, 0x07	; 7
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	de bf       	out	0x3e, r29	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	cd bf       	out	0x3d, r28	; 61
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <DIO_GetPinValue>:



u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <DIO_GetPinValue+0x6>
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <DIO_GetPinValue+0x8>
    1d58:	0f 92       	push	r0
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	8a 83       	std	Y+2, r24	; 0x02
    1d60:	6b 83       	std	Y+3, r22	; 0x03

	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= 4) && (u8PinIdCopy <= 7))
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	85 30       	cpi	r24, 0x05	; 5
    1d66:	08 f0       	brcs	.+2      	; 0x1d6a <DIO_GetPinValue+0x1a>
    1d68:	6c c0       	rjmp	.+216    	; 0x1e42 <DIO_GetPinValue+0xf2>
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	88 30       	cpi	r24, 0x08	; 8
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <DIO_GetPinValue+0x22>
    1d70:	68 c0       	rjmp	.+208    	; 0x1e42 <DIO_GetPinValue+0xf2>
	{

		switch (u8PortIdCopy)
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	3d 83       	std	Y+5, r19	; 0x05
    1d7a:	2c 83       	std	Y+4, r18	; 0x04
    1d7c:	4c 81       	ldd	r20, Y+4	; 0x04
    1d7e:	5d 81       	ldd	r21, Y+5	; 0x05
    1d80:	41 30       	cpi	r20, 0x01	; 1
    1d82:	51 05       	cpc	r21, r1
    1d84:	41 f1       	breq	.+80     	; 0x1dd6 <DIO_GetPinValue+0x86>
    1d86:	8c 81       	ldd	r24, Y+4	; 0x04
    1d88:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8a:	82 30       	cpi	r24, 0x02	; 2
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	34 f4       	brge	.+12     	; 0x1d9c <DIO_GetPinValue+0x4c>
    1d90:	2c 81       	ldd	r18, Y+4	; 0x04
    1d92:	3d 81       	ldd	r19, Y+5	; 0x05
    1d94:	21 15       	cp	r18, r1
    1d96:	31 05       	cpc	r19, r1
    1d98:	61 f0       	breq	.+24     	; 0x1db2 <DIO_GetPinValue+0x62>
    1d9a:	55 c0       	rjmp	.+170    	; 0x1e46 <DIO_GetPinValue+0xf6>
    1d9c:	4c 81       	ldd	r20, Y+4	; 0x04
    1d9e:	5d 81       	ldd	r21, Y+5	; 0x05
    1da0:	42 30       	cpi	r20, 0x02	; 2
    1da2:	51 05       	cpc	r21, r1
    1da4:	51 f1       	breq	.+84     	; 0x1dfa <DIO_GetPinValue+0xaa>
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	9d 81       	ldd	r25, Y+5	; 0x05
    1daa:	83 30       	cpi	r24, 0x03	; 3
    1dac:	91 05       	cpc	r25, r1
    1dae:	b9 f1       	breq	.+110    	; 0x1e1e <DIO_GetPinValue+0xce>
    1db0:	4a c0       	rjmp	.+148    	; 0x1e46 <DIO_GetPinValue+0xf6>
		{
			case PORT0: u8ResultLocal= GET_BIT(PINA_REG,u8PinIdCopy); break;
    1db2:	e9 e3       	ldi	r30, 0x39	; 57
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	28 2f       	mov	r18, r24
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	88 2f       	mov	r24, r24
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a9 01       	movw	r20, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <DIO_GetPinValue+0x7a>
    1dc6:	55 95       	asr	r21
    1dc8:	47 95       	ror	r20
    1dca:	8a 95       	dec	r24
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <DIO_GetPinValue+0x76>
    1dce:	ca 01       	movw	r24, r20
    1dd0:	81 70       	andi	r24, 0x01	; 1
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	38 c0       	rjmp	.+112    	; 0x1e46 <DIO_GetPinValue+0xf6>
			case PORT1: u8ResultLocal= GET_BIT(PINB_REG,u8PinIdCopy); break;
    1dd6:	e6 e3       	ldi	r30, 0x36	; 54
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	a9 01       	movw	r20, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <DIO_GetPinValue+0x9e>
    1dea:	55 95       	asr	r21
    1dec:	47 95       	ror	r20
    1dee:	8a 95       	dec	r24
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <DIO_GetPinValue+0x9a>
    1df2:	ca 01       	movw	r24, r20
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	26 c0       	rjmp	.+76     	; 0x1e46 <DIO_GetPinValue+0xf6>
			case PORT2: u8ResultLocal= GET_BIT(PINC_REG,u8PinIdCopy); break;
    1dfa:	e3 e3       	ldi	r30, 0x33	; 51
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a9 01       	movw	r20, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <DIO_GetPinValue+0xc2>
    1e0e:	55 95       	asr	r21
    1e10:	47 95       	ror	r20
    1e12:	8a 95       	dec	r24
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <DIO_GetPinValue+0xbe>
    1e16:	ca 01       	movw	r24, r20
    1e18:	81 70       	andi	r24, 0x01	; 1
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <DIO_GetPinValue+0xf6>
			case PORT3: u8ResultLocal= GET_BIT(PIND_REG,u8PinIdCopy); break;
    1e1e:	e0 e3       	ldi	r30, 0x30	; 48
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a9 01       	movw	r20, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <DIO_GetPinValue+0xe6>
    1e32:	55 95       	asr	r21
    1e34:	47 95       	ror	r20
    1e36:	8a 95       	dec	r24
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <DIO_GetPinValue+0xe2>
    1e3a:	ca 01       	movw	r24, r20
    1e3c:	81 70       	andi	r24, 0x01	; 1
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_GetPinValue+0xf6>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <DIO_SetPortDirection>:



void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <DIO_SetPortDirection+0x6>
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <DIO_SetPortDirection+0x8>
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	6a 83       	std	Y+2, r22	; 0x02

	switch (u8PortId)
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	3c 83       	std	Y+4, r19	; 0x04
    1e70:	2b 83       	std	Y+3, r18	; 0x03
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	91 05       	cpc	r25, r1
    1e7a:	d1 f0       	breq	.+52     	; 0x1eb0 <DIO_SetPortDirection+0x58>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	2c f4       	brge	.+10     	; 0x1e90 <DIO_SetPortDirection+0x38>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	61 f0       	breq	.+24     	; 0x1ea6 <DIO_SetPortDirection+0x4e>
    1e8e:	1e c0       	rjmp	.+60     	; 0x1ecc <DIO_SetPortDirection+0x74>
    1e90:	2b 81       	ldd	r18, Y+3	; 0x03
    1e92:	3c 81       	ldd	r19, Y+4	; 0x04
    1e94:	22 30       	cpi	r18, 0x02	; 2
    1e96:	31 05       	cpc	r19, r1
    1e98:	81 f0       	breq	.+32     	; 0x1eba <DIO_SetPortDirection+0x62>
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9e:	83 30       	cpi	r24, 0x03	; 3
    1ea0:	91 05       	cpc	r25, r1
    1ea2:	81 f0       	breq	.+32     	; 0x1ec4 <DIO_SetPortDirection+0x6c>
    1ea4:	13 c0       	rjmp	.+38     	; 0x1ecc <DIO_SetPortDirection+0x74>
	{
		case     PORT0: DDRA_REG = u8PortDir; break;
    1ea6:	ea e3       	ldi	r30, 0x3A	; 58
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	80 83       	st	Z, r24
    1eae:	0e c0       	rjmp	.+28     	; 0x1ecc <DIO_SetPortDirection+0x74>
		case     PORT1: DDRB_REG = u8PortDir; break;
    1eb0:	e7 e3       	ldi	r30, 0x37	; 55
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	80 83       	st	Z, r24
    1eb8:	09 c0       	rjmp	.+18     	; 0x1ecc <DIO_SetPortDirection+0x74>
		case     PORT2: DDRC_REG = u8PortDir; break;
    1eba:	e4 e3       	ldi	r30, 0x34	; 52
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	80 83       	st	Z, r24
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <DIO_SetPortDirection+0x74>
		case     PORT3: DDRD_REG = u8PortDir; break;
    1ec4:	e1 e3       	ldi	r30, 0x31	; 49
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	80 83       	st	Z, r24
		default:        break;
	}
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <DIO_SetPortValue>:

void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <DIO_SetPortValue+0x6>
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <DIO_SetPortValue+0x8>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	3c 83       	std	Y+4, r19	; 0x04
    1ef2:	2b 83       	std	Y+3, r18	; 0x03
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	91 05       	cpc	r25, r1
    1efc:	d1 f0       	breq	.+52     	; 0x1f32 <DIO_SetPortValue+0x58>
    1efe:	2b 81       	ldd	r18, Y+3	; 0x03
    1f00:	3c 81       	ldd	r19, Y+4	; 0x04
    1f02:	22 30       	cpi	r18, 0x02	; 2
    1f04:	31 05       	cpc	r19, r1
    1f06:	2c f4       	brge	.+10     	; 0x1f12 <DIO_SetPortValue+0x38>
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	61 f0       	breq	.+24     	; 0x1f28 <DIO_SetPortValue+0x4e>
    1f10:	1e c0       	rjmp	.+60     	; 0x1f4e <DIO_SetPortValue+0x74>
    1f12:	2b 81       	ldd	r18, Y+3	; 0x03
    1f14:	3c 81       	ldd	r19, Y+4	; 0x04
    1f16:	22 30       	cpi	r18, 0x02	; 2
    1f18:	31 05       	cpc	r19, r1
    1f1a:	81 f0       	breq	.+32     	; 0x1f3c <DIO_SetPortValue+0x62>
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	83 30       	cpi	r24, 0x03	; 3
    1f22:	91 05       	cpc	r25, r1
    1f24:	81 f0       	breq	.+32     	; 0x1f46 <DIO_SetPortValue+0x6c>
    1f26:	13 c0       	rjmp	.+38     	; 0x1f4e <DIO_SetPortValue+0x74>
	{
		case     PORT0: PORTA_REG = u8PortVal; break;
    1f28:	eb e3       	ldi	r30, 0x3B	; 59
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	80 83       	st	Z, r24
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <DIO_SetPortValue+0x74>
		case     PORT1: PORTB_REG = u8PortVal; break;
    1f32:	e8 e3       	ldi	r30, 0x38	; 56
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	80 83       	st	Z, r24
    1f3a:	09 c0       	rjmp	.+18     	; 0x1f4e <DIO_SetPortValue+0x74>
		case     PORT2: PORTC_REG = u8PortVal; break;
    1f3c:	e5 e3       	ldi	r30, 0x35	; 53
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	80 83       	st	Z, r24
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <DIO_SetPortValue+0x74>
		case     PORT3: PORTD_REG = u8PortVal; break;
    1f46:	e2 e3       	ldi	r30, 0x32	; 50
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <__udivmodqi4>:
    1f5c:	99 1b       	sub	r25, r25
    1f5e:	79 e0       	ldi	r23, 0x09	; 9
    1f60:	04 c0       	rjmp	.+8      	; 0x1f6a <__udivmodqi4_ep>

00001f62 <__udivmodqi4_loop>:
    1f62:	99 1f       	adc	r25, r25
    1f64:	96 17       	cp	r25, r22
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <__udivmodqi4_ep>
    1f68:	96 1b       	sub	r25, r22

00001f6a <__udivmodqi4_ep>:
    1f6a:	88 1f       	adc	r24, r24
    1f6c:	7a 95       	dec	r23
    1f6e:	c9 f7       	brne	.-14     	; 0x1f62 <__udivmodqi4_loop>
    1f70:	80 95       	com	r24
    1f72:	08 95       	ret

00001f74 <__prologue_saves__>:
    1f74:	2f 92       	push	r2
    1f76:	3f 92       	push	r3
    1f78:	4f 92       	push	r4
    1f7a:	5f 92       	push	r5
    1f7c:	6f 92       	push	r6
    1f7e:	7f 92       	push	r7
    1f80:	8f 92       	push	r8
    1f82:	9f 92       	push	r9
    1f84:	af 92       	push	r10
    1f86:	bf 92       	push	r11
    1f88:	cf 92       	push	r12
    1f8a:	df 92       	push	r13
    1f8c:	ef 92       	push	r14
    1f8e:	ff 92       	push	r15
    1f90:	0f 93       	push	r16
    1f92:	1f 93       	push	r17
    1f94:	cf 93       	push	r28
    1f96:	df 93       	push	r29
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	ca 1b       	sub	r28, r26
    1f9e:	db 0b       	sbc	r29, r27
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	09 94       	ijmp

00001fac <__epilogue_restores__>:
    1fac:	2a 88       	ldd	r2, Y+18	; 0x12
    1fae:	39 88       	ldd	r3, Y+17	; 0x11
    1fb0:	48 88       	ldd	r4, Y+16	; 0x10
    1fb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fba:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fbc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fbe:	b9 84       	ldd	r11, Y+9	; 0x09
    1fc0:	c8 84       	ldd	r12, Y+8	; 0x08
    1fc2:	df 80       	ldd	r13, Y+7	; 0x07
    1fc4:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc6:	fd 80       	ldd	r15, Y+5	; 0x05
    1fc8:	0c 81       	ldd	r16, Y+4	; 0x04
    1fca:	1b 81       	ldd	r17, Y+3	; 0x03
    1fcc:	aa 81       	ldd	r26, Y+2	; 0x02
    1fce:	b9 81       	ldd	r27, Y+1	; 0x01
    1fd0:	ce 0f       	add	r28, r30
    1fd2:	d1 1d       	adc	r29, r1
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	ed 01       	movw	r28, r26
    1fe0:	08 95       	ret

00001fe2 <_exit>:
    1fe2:	f8 94       	cli

00001fe4 <__stop_program>:
    1fe4:	ff cf       	rjmp	.-2      	; 0x1fe4 <__stop_program>
